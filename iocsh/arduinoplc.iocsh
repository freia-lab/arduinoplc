#- ###            MODBUS   arduinoplc               ###
#- ####################################################
#- >> Mandatory
#- ASYN_PORT      - MODBUS ASYN <name>
#- PREFIX	  - PV PREFIX
#- IP_ADDR	  - ethernet address
#- TOP	   	  - top directory for autosave
#- IOCDIR	  - directory for the autosave
#-
#- >> Optional
#- IP_PORT	  - IP port number, default 502

#-https://epics-modules.github.io/master/asyn/R4-42/asynDriver.html
#-Specify the TCP endpoint and give your 'bus' an arbitrary name eg. "asynstream1".
#- drvAsynIPPortConfigure( portName, 
#- 			   hostInfo, 
#-			   priority, 
#-			   noAutoConnect, 
#-			   noProcessEos)
#
drvAsynIPPortConfigure("$(ASYN_PORT)","$(IP_ADDR):$(IP_PORT=502)",0,0,1)
		
#modbusInterposeConfig(portName, 
#                      linkType,
#                      timeoutMsec,
#                      writeDelayMsec)

modbusInterposeConfig("$(ASYN_PORT)",0,2000,0)

#drvModbusAsynConfigure	 'Port name'
#			 'Octet port name' 
#			 'Modbus slave address' 
#			 'Modbus function code' 
#			 'Modbus start address' 
#			 'Modbus length' 
#			 'Data type' 
#			 'Poll time (msec)' 
#			 'PLC type'


drvModbusAsynConfigure(RO_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 3, 0x0000, 8, "UINT16", 1000, "arduinoplc")

#drvModbusAsynConfigure(HRR_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 4, 25000, 2, "UINT16", 1000, "arduinoplc")

# The two address ranges below can be read using function 4 (function 3 doesn't work) but I don't know the meaning the data
#drvModbusAsynConfigure(HRR_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 4, 0x2000, 15, "UINT16", 1000, "arduinoplc")
#drvModbusAsynConfigure(HRRO_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 4, 0x3000, 7, "UINT16", 1000, "arduinoplc")

# The adress ranges for the Global shared  variables (addresses 0x6000-0x6fff)
# can be read using neither function 4 but the Modbus address 0x6000 corresponds to the variable defined in the PLC at adress 0x6001
drvModbusAsynConfigure(HRR_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 4, 0x6000, 12, "UINT16", 1000, "arduinoplc")
drvModbusAsynConfigure(HRW_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 16, 0x6000, 12, "UINT16", 1, "arduinoplc")

drvModbusAsynConfigure(PAR_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 4, 0x4000, 12, "UINT16", 1000, "arduinoplc")
drvModbusAsynConfigure(PARW_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 16, 0x4000, 12, "UINT16", 1, "arduinoplc")

drvModbusAsynConfigure(COILS_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 5, 0x0000, 8, "UINT16", 1, "arduinoplc")
drvModbusAsynConfigure(AO_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 16, 0x0000, 8, "UINT16", 1, "arduinoplc")
drvModbusAsynConfigure(DI_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 2, 0x0000, 8, "UINT16", 500, "arduinoplc")
drvModbusAsynConfigure(AI_DATA_$(ASYN_PORT), "$(ASYN_PORT)", 255, 4, 0x0000, 12, "UINT16", 1000, "arduinoplc")

#Load your database defining the EPICS records

dbLoadRecords("arduinoplc.db", "PORT_COILS=COILS_DATA_$(ASYN_PORT),PORT_DI=DI_DATA_$(ASYN_PORT),PORT_AI=AI_DATA_$(ASYN_PORT),PORT_AO=AO_DATA_$(ASYN_PORT),PORT_RO=RO_DATA_$(ASYN_PORT),PORT_HRR=HRR_DATA_$(ASYN_PORT),PORT_HRW=HRW_DATA_$(ASYN_PORT),PORT_PAR=PAR_DATA_$(ASYN_PORT),PORT_PARW=PARW_DATA_$(ASYN_PORT),P=$(PREFIX),D=$(DEV_NAME)")

#################################################

iocshLoad("$(autosave_DIR)autosave.iocsh", "AS_TOP=$(TOP),IOCNAME=$(IOCDIR)")

#################################################

asynSetTraceIOMask "$(ASYN_PORT)",0,4   # Enable traceIOHex
#asynSetTraceMask "$(ASYN_PORT)",0,9     # Enable traceError and traceIODriver
